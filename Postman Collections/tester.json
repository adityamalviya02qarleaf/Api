{
	"info": {
		"_postman_id": "fb73ffdd-ca8c-40a9-ba3a-5718a5231c68",
		"name": "Sample Postman Collection",
		"description": "A sample collection to demonstrate collections as a set of related requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Newman: GET request",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('expect response be 200', function () {",
							"    pm.response.to.be.ok",
							"})",
							"pm.test('expect response json contain args', function () {",
							"    pm.expect(pm.response.json().args).to.have.property('source')",
							"      .and.equal('newman-sample-github-collection')",
							"})"
						],
						"id": "a5a8601f-fcd1-4321-b585-17de56e345df"
					}
				}
			],
			"id": "71c9847e-31bd-4a51-8213-473452ab7108",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get?source=newman-sample-github-collection",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					],
					"query": [
						{
							"key": "source",
							"value": "newman-sample-github-collection"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Newman: POST request",
			"id": "ea222b34-af45-4d39-a63f-dd134f0d65a0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/plain"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium..."
				},
				"url": "https://postman-echo.com/post"
			},
			"response": []
		},
		{
			"name": "Newman: POST request with JSON body",
			"id": "0bdcee99-9379-44b8-8e0c-ab60a12a273b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"text\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}"
				},
				"url": "https://postman-echo.com/post"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3d3c0ee0-8fa4-4850-8080-91774fc747d0",
				"type": "text/javascript",
				"exec": [
					"// Required modules",
					"const newman = require('newman');",
					"const nodemailer = require('nodemailer');",
					"const fs = require('fs');",
					"",
					"// Define Postman collection URL and API key",
					"const collectionUrl = \"https://api.getpostman.com/collections/29049705-fb73ffdd-ca8c-40a9-ba3a-5718a5231c68?apikey=PMAK-65e5ae268f1fdb0001d378cf-12c9b32e23e77db7f680a33792a92f383f\";",
					"",
					"// Run Newman with the collection URL",
					"newman.run({",
					"    collection: collectionUrl,",
					"    reporters: ['html']",
					"}, function (err, summary) {",
					"    if (err) {",
					"        console.error('Error occurred:', err);",
					"        return;",
					"    }",
					"    console.log('Collection run complete.');",
					"",
					"    // Read the HTML report file",
					"    const report = fs.readFileSync(summary.run.executions[0].item.id + \".html\", 'utf8');",
					"",
					"    // Create a transporter object",
					"    let transporter = nodemailer.createTransport({",
					"        service: 'gmail',",
					"        auth: {",
					"            user: 'your_email@gmail.com',",
					"            pass: 'your_password'",
					"        }",
					"    });",
					"",
					"    // Setup email data",
					"    let mailOptions = {",
					"        from: 'your_email@gmail.com',",
					"        to: 'recipient_email@gmail.com',",
					"        subject: 'Postman Collection Report',",
					"        html: report,",
					"        attachments: [",
					"            {",
					"                filename: summary.run.executions[0].item.id + \".html\",",
					"                content: report",
					"            }",
					"        ]",
					"    };",
					"",
					"    // Send email with attachment",
					"    transporter.sendMail(mailOptions, (error, info) => {",
					"        if (error) {",
					"            console.error('Error occurred:', error);",
					"        } else {",
					"            console.log('Email sent:', info.response);",
					"        }",
					"    });",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2a538066-2320-4b39-aec0-85f828a285d0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}